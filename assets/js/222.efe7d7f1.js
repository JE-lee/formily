(window.webpackJsonp=window.webpackJsonp||[]).push([[222],{686:function(n,e,t){"use strict";t.r(e),e.default="<template>\n  <Form :form=\"form\">\n    <SchemaField :schema=\"schema\" :scope=\"{ useAsyncDataSource, loadData }\" />\n    <Submit @submit=\"onSubmit\">提交</Submit>\n  </Form>\n</template>\n\n<script>\nimport { createForm } from '@formily/core'\nimport { createSchemaField } from '@formily/vue'\nimport { action } from '@formily/reactive'\nimport { Form, FormItem, Select, Submit, Reset } from '@formily/view-design'\n\nconst schema = {\n  type: 'object',\n  properties: {\n    linkage: {\n      type: 'string',\n      title: '联动选择框',\n      enum: [\n        {\n          label: '发请求1',\n          value: 1,\n        },\n        {\n          label: '发请求2',\n          value: 2,\n        },\n      ],\n      'x-decorator': 'FormItem',\n      'x-component': 'Select',\n      'x-component-props': {\n        style: 'width: 240px;',\n      },\n    },\n    select: {\n      type: 'string',\n      title: '异步选择框',\n      'x-decorator': 'FormItem',\n      'x-component': 'Select',\n      'x-component-props': {\n        style: 'width: 240px;',\n      },\n      'x-reactions': ['{{useAsyncDataSource(loadData)}}'],\n    },\n  },\n}\n\nconst useAsyncDataSource = (service) => (field) => {\n  field.loading = true\n  service(field).then(\n    action((data) => {\n      field.dataSource = data\n      field.loading = false\n    })\n  )\n}\n\nconst loadData = async (field) => {\n  const linkage = field.query('linkage').get('value')\n  if (!linkage) return []\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      if (linkage === 1) {\n        resolve([\n          {\n            label: 'AAA',\n            value: 'aaa',\n          },\n          {\n            label: 'BBB',\n            value: 'ccc',\n          },\n        ])\n      } else if (linkage === 2) {\n        resolve([\n          {\n            label: 'CCC',\n            value: 'ccc',\n          },\n          {\n            label: 'DDD',\n            value: 'ddd',\n          },\n        ])\n      }\n    }, 1500)\n  })\n}\n\nconst form = createForm()\nconst { SchemaField } = createSchemaField({\n  components: {\n    FormItem,\n    Select,\n  },\n})\n\nexport default {\n  components: { Form, SchemaField, Submit, Reset },\n  data() {\n    return {\n      form,\n      schema,\n    }\n  },\n  methods: {\n    useAsyncDataSource,\n    loadData,\n    onSubmit(value) {\n      console.log(value)\n    },\n  },\n}\n<\/script>\n"}}]);