(window.webpackJsonp=window.webpackJsonp||[]).push([[190],{654:function(n,e,t){"use strict";t.r(e),e.default='<template>\n  <FormProvider :form="form">\n    <SchemaField>\n      <SchemaVoidField x-component="Title" x-content="label为空时的展示: " />\n      <SchemaStringField\n        x-decorator="FormItem"\n        x-component="Input"\n        :x-decorator-props="{\n          labelWidth: 300,\n        }"\n      />\n      <SchemaStringField\n        title=""\n        x-decorator="FormItem"\n        x-component="Input"\n        :x-decorator-props="{\n          labelWidth: 300,\n        }"\n      />\n      <SchemaVoidField x-component="Title" x-content="冒号: " />\n      <SchemaStringField\n        title="默认"\n        x-decorator="FormItem"\n        x-component="Input"\n      />\n      <SchemaStringField\n        title="无冒号(colon=false)"\n        x-decorator="FormItem"\n        x-component="Input"\n        :x-decorator-props="{\n          colon: false,\n        }"\n      />\n      <SchemaVoidField x-component="Title" x-content="固定宽度设置: " />\n      <SchemaStringField\n        title="固定label宽度(labelWidth)"\n        x-decorator="FormItem"\n        x-component="Input"\n        :x-decorator-props="{\n          labelWidth: 300,\n        }"\n      />\n      <SchemaStringField\n        title="固定label宽度(labelWidth)溢出溢出溢出溢出溢出溢出溢出溢出溢出溢出溢出溢出溢出溢出溢出溢出溢出溢出溢出溢出溢出溢出溢出溢出溢出溢出溢出溢出"\n        description="描述描述"\n        x-decorator="FormItem"\n        x-component="Input"\n        :x-decorator-props="{\n          labelWidth: 300,\n          tooltip: \'提示提示\',\n        }"\n      />\n      <SchemaStringField\n        title="固定label宽度(labelWidth)换行换行换行换行换行换行换行换行换行换行换行换行换行换行换行换行换行换行换行换行换行换行换行换行换行换行"\n        description="描述描述"\n        x-decorator="FormItem"\n        x-component="Input"\n        :x-decorator-props="{\n          labelWidth: 300,\n          labelWrap: true,\n          tooltip: \'提示提示\',\n        }"\n      />\n      <SchemaStringField\n        title="固定内容宽度(wraperWidth)"\n        x-decorator="FormItem"\n        x-component="Input"\n        :x-decorator-props="{\n          labelWidth: 300,\n          wrapperWidth: 300,\n        }"\n      />\n      <SchemaVoidField x-component="Title" x-content="对齐方式设置:" />\n      <SchemaStringField\n        title="label左对齐(labelAlign=left)"\n        x-decorator="FormItem"\n        x-component="Input"\n        :x-decorator-props="{\n          labelWidth: 300,\n          labelAlign: \'left\',\n        }"\n      />\n      <SchemaStringField\n        title="label右对齐(labelAlign=right默认)"\n        x-decorator="FormItem"\n        x-component="Input"\n        :x-decorator-props="{\n          labelWidth: 300,\n          labelAlign: \'right\',\n        }"\n      />\n      <SchemaStringField\n        title="内容左对齐(wrapperAlign=left默认)"\n        x-decorator="FormItem"\n        x-component="Input"\n        :x-decorator-props="{\n          labelWidth: 300,\n          wrapperWidth: 240,\n          wrapperAlign: \'left\',\n        }"\n      />\n      <SchemaStringField\n        title="内容右对齐(wrapperAlign=right)"\n        x-decorator="FormItem"\n        x-component="Input"\n        :x-decorator-props="{\n          labelWidth: 300,\n          wrapperWidth: 240,\n          wrapperAlign: \'right\',\n        }"\n      />\n      <SchemaStringField\n        title="tooltip"\n        x-decorator="FormItem"\n        x-component="Input"\n        :x-decorator-props="{\n          tooltip: \'tooltip\',\n        }"\n      />\n      <SchemaStringField\n        title="tooltip"\n        x-decorator="FormItem"\n        x-component="Input"\n        :x-decorator-props="{\n          tooltip: \'tooltip\',\n          tooltipLayout: \'text\',\n        }"\n      />\n      <SchemaVoidField x-component="Title" x-content="是否撑满: " />\n      <SchemaStringField\n        title="默认不撑满(fullness=false)"\n        x-decorator="FormItem"\n        x-component="Select"\n      />\n      <SchemaStringField\n        title="撑满(fullness=true)"\n        x-decorator="FormItem"\n        x-component="Select"\n        :x-decorator-props="{\n          fullness: true,\n        }"\n      />\n      <SchemaVoidField x-component="Title" x-content="辅助信息: " />\n      <SchemaStringField\n        title="必填星号"\n        x-decorator="FormItem"\n        x-component="Input"\n        :x-decorator-props="{\n          asterisk: true,\n          labelCol: 6,\n          wrapperCol: 10,\n        }"\n      />\n      <SchemaStringField\n        title="前缀"\n        x-decorator="FormItem"\n        x-component="Input"\n        :x-decorator-props="{\n          addonBefore: \'addonBefore\',\n          labelCol: 6,\n          wrapperCol: 10,\n        }"\n      />\n      <SchemaStringField\n        title="后缀"\n        x-decorator="FormItem"\n        x-component="Input"\n        :x-decorator-props="{\n          addonAfter: \'addonAfter\',\n          labelCol: 6,\n          wrapperCol: 10,\n        }"\n      />\n      <SchemaStringField\n        title="帮助信息feedbackText"\n        x-decorator="FormItem"\n        x-component="Input"\n        :x-decorator-props="{\n          feedbackText: \'feedbackText\',\n          labelCol: 6,\n          wrapperCol: 10,\n        }"\n      />\n      <SchemaStringField\n        title="额外信息extra"\n        x-decorator="FormItem"\n        x-component="Input"\n        :x-decorator-props="{\n          feedbackText: \'feedbackText\',\n          extra: \'extra\',\n          labelCol: 6,\n          wrapperCol: 10,\n        }"\n      />\n      <SchemaVoidField x-component="Title" x-content="表单状态: " />\n      <SchemaStringField\n        title="错误状态(feedbackStatus=error)"\n        x-decorator="FormItem"\n        x-component="Input"\n        description="description"\n        :x-decorator-props="{\n          feedbackStatus: \'error\',\n        }"\n      />\n      <SchemaStringField\n        title="警告状态(feedbackStatus=warning)"\n        x-decorator="FormItem"\n        x-component="Input"\n        description="description"\n        :x-decorator-props="{\n          feedbackStatus: \'warning\',\n        }"\n      />\n      <SchemaStringField\n        title="成功状态(feedbackStatus=success)"\n        x-decorator="FormItem"\n        x-component="Input"\n        description="description"\n        :x-decorator-props="{\n          feedbackStatus: \'success\',\n        }"\n      />\n      <SchemaStringField\n        title="加载状态(feedbackStatus=pending)"\n        x-decorator="FormItem"\n        x-component="Input"\n        description="description"\n        :x-decorator-props="{\n          feedbackStatus: \'pending\',\n        }"\n      />\n      <SchemaVoidField x-component="Title" x-content="反馈信息的布局: " />\n      <SchemaStringField\n        title="紧凑模式required"\n        x-decorator="FormItem"\n        x-component="Input"\n        :required="true"\n        :x-decorator-props="{\n          feedbackLayout: \'terse\',\n        }"\n      />\n      <SchemaStringField\n        title="紧凑模式有feedback(feedbackLayout=terse)"\n        x-decorator="FormItem"\n        x-component="Input"\n        :x-decorator-props="{\n          feedbackStatus: \'error\',\n          feedbackText: \'error message\',\n          feedbackLayout: \'terse\',\n        }"\n      />\n      <SchemaStringField\n        title="紧凑模式无feedback(feedbackLayout=terse)"\n        x-decorator="FormItem"\n        x-component="Input"\n        :x-decorator-props="{\n          feedbackLayout: \'terse\',\n        }"\n      />\n      <SchemaStringField\n        title="松散模式(feedbackLayout=loose)"\n        x-decorator="FormItem"\n        x-component="Input"\n        :x-decorator-props="{\n          feedbackStatus: \'error\',\n          feedbackText: \'error message\',\n          feedbackLayout: \'loose\',\n        }"\n      />\n      <SchemaStringField\n        title="弹出模式(feedbackLayout=popover)"\n        x-decorator="FormItem"\n        x-component="Input"\n        :x-decorator-props="{\n          feedbackStatus: \'warning\',\n          feedbackText: \'warning message\',\n          feedbackLayout: \'popover\',\n        }"\n      />\n      <SchemaStringField\n        title="弹出模式(feedbackLayout=popover)"\n        x-decorator="FormItem"\n        x-component="Input"\n        :x-decorator-props="{\n          feedbackStatus: \'error\',\n          feedbackText: \'error message\',\n          feedbackLayout: \'popover\',\n        }"\n      />\n      <SchemaStringField\n        title="弹出模式(feedbackLayout=popover)"\n        x-decorator="FormItem"\n        x-component="Input"\n        :x-decorator-props="{\n          feedbackStatus: \'success\',\n          feedbackText: \'success message\',\n          feedbackLayout: \'popover\',\n        }"\n      />\n      <SchemaVoidField x-component="Title" x-content="组件的适配情况: " />\n      <SchemaVoidField\n        x-component="FormLayout"\n        :x-component-props="{\n          labelCol: 6,\n          wrapperCol: 10,\n        }"\n      >\n        <SchemaStringField\n          title="Select"\n          x-decorator="FormItem"\n          x-component="Select"\n          :x-decorator-props="{\n            feedbackStatus: \'success\',\n            feedbackIcon: SuccessIcon,\n          }"\n        />\n        <SchemaStringField\n          title="DatePicker"\n          x-decorator="FormItem"\n          x-component="DatePicker"\n          :x-decorator-props="{\n            feedbackStatus: \'success\',\n            feedbackIcon: SuccessIcon,\n          }"\n        />\n        <SchemaStringField\n          title="DateRangePicker"\n          x-decorator="FormItem"\n          x-component="DatePicker"\n          :x-decorator-props="{\n            feedbackStatus: \'success\',\n            feedbackIcon: SuccessIcon,\n          }"\n          :x-component-props="{\n            type: \'daterange\',\n          }"\n        />\n        <SchemaStringField\n          title="YearPicker"\n          x-decorator="FormItem"\n          x-component="DatePicker"\n          :x-decorator-props="{\n            feedbackStatus: \'success\',\n            feedbackIcon: SuccessIcon,\n          }"\n          :x-component-props="{\n            type: \'year\',\n          }"\n        />\n        <SchemaStringField\n          title="MonthPicker"\n          x-decorator="FormItem"\n          x-component="DatePicker"\n          :x-decorator-props="{\n            feedbackStatus: \'success\',\n            feedbackIcon: SuccessIcon,\n          }"\n          :x-component-props="{\n            type: \'month\',\n          }"\n        />\n        <SchemaStringField\n          title="TimePicker"\n          x-decorator="FormItem"\n          x-component="TimePicker"\n          :x-decorator-props="{\n            feedbackStatus: \'success\',\n            feedbackIcon: SuccessIcon,\n          }"\n        />\n        <SchemaStringField\n          title="InputNumber"\n          x-decorator="FormItem"\n          x-component="InputNumber"\n          :x-decorator-props="{\n            feedbackStatus: \'success\',\n            feedbackIcon: SuccessIcon,\n          }"\n        />\n        <SchemaStringField\n          title="Cascader"\n          x-decorator="FormItem"\n          x-component="Cascader"\n          :x-decorator-props="{\n            feedbackStatus: \'success\',\n            feedbackIcon: SuccessIcon,\n          }"\n        />\n      </SchemaVoidField>\n    </SchemaField>\n  </FormProvider>\n</template>\n\n<script>\nimport { createForm } from \'@formily/core\'\nimport { createSchemaField, FormProvider } from \'@formily/vue\'\nimport {\n  FormItem,\n  InputNumber,\n  Input,\n  Cascader,\n  Select,\n  DatePicker,\n  FormLayout,\n  TimePicker,\n} from \'@formily/view-design\'\n\nconst SuccessIcon = {\n  functional: true,\n  render(h) {\n    return h(\'i\', {\n      class: \'ivu-icon ivu-icon-ios-checkmark-circle-outline\',\n      style: { color: \'#8AE65C\' },\n    })\n  },\n}\n\nconst Title = {\n  functional: true,\n  render(h, context) {\n    return h(\'p\', context.data, context.children)\n  },\n}\n\n// const DATA = [{\n//     value: \'beijing\',\n//     label: \'北京\',\n//     children: [\n//         {\n//             value: \'gugong\',\n//             label: \'故宫\'\n//         },\n//         {\n//             value: \'tiantan\',\n//             label: \'天坛\'\n//         },\n//         {\n//             value: \'wangfujing\',\n//             label: \'王府井\'\n//         }\n//     ]\n// }, {\n//     value: \'jiangsu\',\n//     label: \'江苏\',\n//     children: [\n//         {\n//             value: \'nanjing\',\n//             label: \'南京\',\n//             children: [\n//                 {\n//                     value: \'fuzimiao\',\n//                     label: \'夫子庙\',\n//                 }\n//             ]\n//         },\n//         {\n//             value: \'suzhou\',\n//             label: \'苏州\',\n//             children: [\n//                 {\n//                     value: \'zhuozhengyuan\',\n//                     label: \'拙政园\',\n//                 },\n//                 {\n//                     value: \'shizilin\',\n//                     label: \'狮子林\',\n//                 }\n//             ]\n//         }\n//     ],\n// }]\n\nconst fields = createSchemaField({\n  components: {\n    Title,\n    FormItem,\n    InputNumber,\n    Input,\n    Cascader,\n    Select,\n    DatePicker,\n    FormLayout,\n    TimePicker,\n  },\n})\n\nexport default {\n  components: { FormProvider, ...fields },\n  data() {\n    const form = createForm()\n    return {\n      form,\n      SuccessIcon,\n      // DATA,\n    }\n  },\n}\n<\/script>\n'}}]);