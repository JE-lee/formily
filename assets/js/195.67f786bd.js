(window.webpackJsonp=window.webpackJsonp||[]).push([[195],{659:function(n,e,t){"use strict";t.r(e),e.default='<template>\n  <Form :form="form">\n    <SchemaField>\n      <SchemaStringField\n        name="size"\n        title="Radio.Group"\n        x-decorator="FormItem"\n        x-component="RadioGroup"\n        :enum="[\n          { value: \'small\', label: \'Small\' },\n          { value: \'default\', label: \'Default\' },\n          { value: \'large\', label: \'Large\' },\n        ]"\n      />\n      <SchemaVoidField name="sizeWrap" x-component="Div">\n        <SchemaStringField\n          name="input"\n          title="Input"\n          x-decorator="FormItem"\n          x-component="Input"\n          required\n        />\n        <SchemaStringField\n          name="select1"\n          title="Multiple Select"\n          x-decorator="FormItem"\n          x-component="Select"\n          :enum="[\n            {\n              label: \'选项1\',\n              value: 1,\n            },\n            {\n              label: \'选项2\',\n              value: 2,\n            },\n          ]"\n          :x-component-props="{\n            multiple: true,\n            placeholder: \'请选择\',\n          }"\n          required\n        />\n        <SchemaStringField\n          name="select2"\n          title="Select"\n          x-decorator="FormItem"\n          x-component="Select"\n          :enum="[\n            {\n              label: \'选项1\',\n              value: 1,\n            },\n            {\n              label: \'选项2\',\n              value: 2,\n            },\n          ]"\n          :x-component-props="{\n            placeholder: \'请选择\',\n          }"\n          required\n        />\n        <SchemaStringField\n          name="Cascader"\n          title="Cascader"\n          x-decorator="FormItem"\n          x-component="Cascader"\n          required\n        />\n        <SchemaStringField\n          name="DatePicker"\n          title="DatePicker"\n          x-decorator="FormItem"\n          x-component="DatePicker"\n          required\n        />\n        <SchemaStringField\n          name="InputNumber"\n          title="InputNumber"\n          x-decorator="FormItem"\n          x-component="InputNumber"\n          required\n        />\n        <SchemaStringField\n          name="Switch"\n          title="Switch"\n          x-decorator="FormItem"\n          x-component="Switch"\n          required\n        />\n      </SchemaVoidField>\n    </SchemaField>\n  </Form>\n</template>\n\n<script>\nimport { createForm, onFieldChange } from \'@formily/core\'\nimport { createSchemaField } from \'@formily/vue\'\nimport {\n  Form,\n  FormItem,\n  Input,\n  Select,\n  Cascader,\n  DatePicker,\n  Switch,\n  InputNumber,\n  RadioGroup,\n} from \'@formily/view-design\'\n\nconst Div = {\n  functional: true,\n  render(h, context) {\n    return h(\'div\', context.data, context.children)\n  },\n}\n\nconst form = createForm({\n  values: {\n    size: \'default\',\n  },\n  effects: () => {\n    onFieldChange(\'size\', [\'value\'], (field, form) => {\n      form.setFieldState(\'sizeWrap.*\', (state) => {\n        if (state.decorator[1]) {\n          state.decorator[1].size = field.value\n        }\n      })\n    })\n  },\n})\nconst fields = createSchemaField({\n  components: {\n    FormItem,\n    Input,\n    Select,\n    Cascader,\n    DatePicker,\n    Switch,\n    InputNumber,\n    RadioGroup,\n    Div,\n  },\n})\n\nexport default {\n  components: { Form, ...fields },\n  data() {\n    return {\n      form,\n    }\n  },\n  methods: {\n    onSubmit(value) {\n      console.log(value)\n    },\n  },\n}\n<\/script>\n'}}]);