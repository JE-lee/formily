(window.webpackJsonp=window.webpackJsonp||[]).push([[225],{689:function(n,e,t){"use strict";t.r(e),e.default="<template>\n  <Form :form=\"form\">\n    <SchemaField>\n      <SchemaNumberField\n        name=\"linkage\"\n        title=\"联动选择框\"\n        x-decorator=\"FormItem\"\n        x-component=\"Select\"\n        :enum=\"[\n          { label: '发请求1', value: 1 },\n          { label: '发请求2', value: 2 },\n        ]\"\n        :x-component-props=\"{\n          style: {\n            width: '240px',\n          },\n        }\"\n      />\n      <SchemaStringField\n        name=\"select\"\n        title=\"异步选择框\"\n        x-decorator=\"FormItem\"\n        x-component=\"Select\"\n        :x-component-props=\"{\n          style: {\n            width: '240px',\n          },\n        }\"\n      />\n    </SchemaField>\n    <Submit @submit=\"onSubmit\">提交</Submit>\n  </Form>\n</template>\n\n<script>\nimport { createForm, onFieldReact } from '@formily/core'\nimport { createSchemaField } from '@formily/vue'\nimport { action } from '@formily/reactive'\nimport { Form, FormItem, Select, Submit, Reset } from '@formily/view-design'\n\nconst useAsyncDataSource = (pattern, service) => {\n  onFieldReact(pattern, (field) => {\n    field.loading = true\n    service(field).then(\n      action((data) => {\n        field.dataSource = data\n        field.loading = false\n      })\n    )\n  })\n}\n\nconst form = createForm({\n  effects: () => {\n    useAsyncDataSource('select', async (field) => {\n      const linkage = field.query('linkage').get('value')\n      if (!linkage) return []\n      return new Promise((resolve) => {\n        setTimeout(() => {\n          if (linkage === 1) {\n            resolve([\n              {\n                label: 'AAA',\n                value: 'aaa',\n              },\n              {\n                label: 'BBB',\n                value: 'ccc',\n              },\n            ])\n          } else if (linkage === 2) {\n            resolve([\n              {\n                label: 'CCC',\n                value: 'ccc',\n              },\n              {\n                label: 'DDD',\n                value: 'ddd',\n              },\n            ])\n          }\n        }, 1500)\n      })\n    })\n  },\n})\nconst fields = createSchemaField({\n  components: {\n    FormItem,\n    Select,\n  },\n})\n\nexport default {\n  components: { Form, ...fields, Submit, Reset },\n  data() {\n    return {\n      form,\n    }\n  },\n  methods: {\n    onSubmit(value) {\n      console.log(value)\n    },\n  },\n}\n<\/script>\n"}}]);