(window.webpackJsonp=window.webpackJsonp||[]).push([[163],{627:function(n,e,t){"use strict";t.r(e),e.default="<template>\n  <Form :form=\"form\">\n    <SchemaField\n      :schema=\"schema\"\n      :scope=\"{ useAsyncDataSource, transformAddress }\"\n    />\n    <Submit @submit=\"onSubmit\">提交</Submit>\n  </Form>\n</template>\n\n<script>\nimport { createForm } from '@formily/core'\nimport { createSchemaField } from '@formily/vue'\nimport { Form, FormItem, Cascader, Submit } from '@formily/view-design'\nimport { action } from '@formily/reactive'\nimport axios from 'axios'\n\nconst transformAddress = (data = {}) => {\n  return Object.entries(data).reduce((buf, [key, value]) => {\n    if (typeof value === 'string')\n      return buf.concat({\n        label: value,\n        value: key,\n      })\n    const { name, code, cities, districts } = value\n    const _cities = transformAddress(cities)\n    const _districts = transformAddress(districts)\n    return buf.concat({\n      label: name,\n      value: code,\n      children: _cities.length ? _cities : _districts.length ? _districts : [],\n    })\n  }, [])\n}\n\nconst useAsyncDataSource = (url, transform) => {\n  return (field) => {\n    field.loading = true\n    axios\n      .get(url)\n      .then((res) => res.data)\n      .then(\n        action((data) => {\n          field.dataSource = transform(data)\n          field.loading = false\n        })\n      )\n  }\n}\n\nconst schema = {\n  type: 'object',\n  properties: {\n    cascader: {\n      type: 'string',\n      title: '地址选择',\n      'x-decorator': 'FormItem',\n      'x-component': 'Cascader',\n      'x-component-props': {\n        style: {\n          width: '240px',\n        },\n      },\n      'x-reactions': [\n        '{{useAsyncDataSource(\"//unpkg.com/china-location/dist/location.json\",transformAddress)}}',\n      ],\n    },\n  },\n}\n\nconst form = createForm()\nconst { SchemaField } = createSchemaField({\n  components: {\n    FormItem,\n    Cascader,\n  },\n})\n\nexport default {\n  components: { Form, SchemaField, Submit },\n  data() {\n    return {\n      useAsyncDataSource,\n      transformAddress,\n      form,\n      schema,\n    }\n  },\n  methods: {\n    onSubmit(value) {\n      console.log(value)\n    },\n  },\n}\n<\/script>\nl\n"}}]);